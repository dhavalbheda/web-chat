[{"D:\\Work\\web-chat\\src\\index.js":"1","D:\\Work\\web-chat\\src\\Redux\\store.js":"2","D:\\Work\\web-chat\\src\\App.js":"3","D:\\Work\\web-chat\\src\\Redux\\rootReducer.js":"4","D:\\Work\\web-chat\\src\\Redux\\User\\UserActions.js":"5","D:\\Work\\web-chat\\src\\Components\\Layout\\PrivateRoute.js":"6","D:\\Work\\web-chat\\src\\Components\\SignInComponent\\SignIn.js":"7","D:\\Work\\web-chat\\src\\Components\\SignUpComponent\\SignUp.js":"8","D:\\Work\\web-chat\\src\\Components\\ChatComponent\\Chat.js":"9","D:\\Work\\web-chat\\src\\Redux\\User\\UserReducer.js":"10","D:\\Work\\web-chat\\src\\Redux\\Chat\\ChatReducer.js":"11","D:\\Work\\web-chat\\src\\Redux\\User\\ActionType.js":"12","D:\\Work\\web-chat\\src\\config\\firebaseConfig.js":"13","D:\\Work\\web-chat\\src\\Components\\Layout\\Alert.js":"14","D:\\Work\\web-chat\\src\\Redux\\Chat\\ChatActions.js":"15","D:\\Work\\web-chat\\src\\Components\\Header\\Header.js":"16","D:\\Work\\web-chat\\src\\Redux\\Chat\\ActionType.js":"17"},{"size":634,"mtime":1611818724664,"results":"18","hashOfConfig":"19"},{"size":300,"mtime":1611565731857,"results":"20","hashOfConfig":"19"},{"size":897,"mtime":1612352436287,"results":"21","hashOfConfig":"19"},{"size":255,"mtime":1611565731857,"results":"22","hashOfConfig":"19"},{"size":6670,"mtime":1611825907479,"results":"23","hashOfConfig":"19"},{"size":475,"mtime":1611565731848,"results":"24","hashOfConfig":"19"},{"size":3556,"mtime":1611748716496,"results":"25","hashOfConfig":"19"},{"size":6283,"mtime":1612349099452,"results":"26","hashOfConfig":"19"},{"size":6232,"mtime":1612356382293,"results":"27","hashOfConfig":"19"},{"size":1407,"mtime":1611825054240,"results":"28","hashOfConfig":"19"},{"size":1863,"mtime":1612179191186,"results":"29","hashOfConfig":"19"},{"size":330,"mtime":1611824919073,"results":"30","hashOfConfig":"19"},{"size":572,"mtime":1611926286318,"results":"31","hashOfConfig":"19"},{"size":322,"mtime":1611565731848,"results":"32","hashOfConfig":"19"},{"size":3592,"mtime":1612357453711,"results":"33","hashOfConfig":"19"},{"size":1046,"mtime":1611739113870,"results":"34","hashOfConfig":"19"},{"size":447,"mtime":1612178222768,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1visszv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Work\\web-chat\\src\\index.js",[],["72","73"],"D:\\Work\\web-chat\\src\\Redux\\store.js",[],"D:\\Work\\web-chat\\src\\App.js",[],"D:\\Work\\web-chat\\src\\Redux\\rootReducer.js",[],"D:\\Work\\web-chat\\src\\Redux\\User\\UserActions.js",[],"D:\\Work\\web-chat\\src\\Components\\Layout\\PrivateRoute.js",[],"D:\\Work\\web-chat\\src\\Components\\SignInComponent\\SignIn.js",[],"D:\\Work\\web-chat\\src\\Components\\SignUpComponent\\SignUp.js",[],"D:\\Work\\web-chat\\src\\Components\\ChatComponent\\Chat.js",["74","75","76"],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport Picker from 'emoji-picker-react';\r\n\r\n// User Define\r\nimport './../Utils/css/font-awesome.css';\r\nimport './style.css';\r\nimport Header from '../Header/Header';\r\nimport { getAllFriends, getConversation, removeLister, saveMessage } from '../../Redux/Chat/ChatActions';\r\n\r\n/**\r\n* @author DhavalBheda\r\n* @function Chat\r\n**/\r\n\r\nconst Chat = (props) => {\r\n  const { user } = useSelector(state => state.User);\r\n  const { conversation } = useSelector(state => state.Chat);\r\n  const { friends } = useSelector(state => state.Chat);\r\n  const [startChat, setStartChat] = useState(false);\r\n  const [selectedFriend, setSelectedFriend] = useState({});\r\n  const [text, setText] = useState('');\r\n  const [emojiPickerClick, setEmojiPickerClick] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  let unsubscribe;\r\n  useEffect(() => {\r\n      unsubscribe = dispatch(getAllFriends(user.uid))\r\n      .then(unsubscribeMehod => unsubscribeMehod)\r\n      .catch(error => console.log(error))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    return () => removeLister(user.uid, selectedFriend.uid);\r\n  }, [selectedFriend]);\r\n  \r\n\r\n  const selectFriend = (friend) => {\r\n    if(selectedFriend && selectedFriend.uid === friend.uid)\r\n      return;\r\n      console.log(friend.uid);\r\n    setStartChat(true);\r\n    setEmojiPickerClick(false);\r\n    setText('');\r\n    setSelectedFriend(friend);  \r\n    dispatch(getConversation({\r\n        sender: user.uid,\r\n        receiver: friend.uid}))\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    setText('');\r\n    const data = {\r\n      uuid: uuidv4(),\r\n      sender: user.uid,\r\n      receiver: selectedFriend.uid,\r\n      message: text\r\n    }\r\n    saveMessage(data);\r\n  }\r\n\r\n  const onEmojiClick = (event, {emoji}) => {\r\n    setText(text +  emoji);\r\n   console.log(emoji);\r\n  };\r\n  return(\r\n        <Fragment>\r\n          <Header/>\r\n          <section className=\"container-body\">\r\n            <div className=\"listOfUsers\">\r\n              {friends.length > 0 && <LoadFriends uid={user.uid} selectFriend={selectFriend} friends={friends} selectedFriend={selectedFriend} />}\r\n            </div>\r\n            <div className=\"chatArea\">\r\n                <div className=\"chatHeader\"> \r\n                  {startChat && selectedFriend.firstName + \" \" + selectedFriend.lastName}\r\n                </div>\r\n                <ScrollToBottom className={emojiPickerClick ? \"messageSections-collaps\" : \"messageSections\"}>\r\n                    {\r\n                      startChat && <ChatComponent conversation = {conversation} selectedFriend = {selectedFriend} user = {user}  />\r\n                    }\r\n                </ScrollToBottom>\r\n                <div className=\"chatControls\" style={emojiPickerClick ? {height:'45%'} :  {height:'5%'}}>\r\n                  {\r\n                    startChat && <Fragment>\r\n                      <div className=\"control\">\r\n                        <textarea\r\n                            placeholder = 'Enter Text...'\r\n                            value = {text}\r\n                            onChange = {e => {\r\n                                setText(e.target.value)\r\n                            }}\r\n                            ></textarea>\r\n                            <span className=\"smile-icon\" onClick={e => setEmojiPickerClick(!emojiPickerClick)}><i className=\"far fa-smile\"></i></span>\r\n                            <span className=\"send-button-icon\" onClick={sendMessage}><i className=\"fas fa-paper-plane\"></i></span>\r\n                      </div>\r\n                      <div>\r\n                       { <Picker onEmojiClick={onEmojiClick} />}\r\n                      </div>\r\n                    </Fragment>\r\n                  }\r\n                </div>\r\n              </div>\r\n          </section>\r\n        </Fragment>\r\n   )\r\n}\r\n\r\nconst LoadFriends = ({friends, selectFriend, uid, selectedFriend}) => {\r\n  const addClass = (friend, uid) => {\r\n    if(friend.pendding) {\r\n      if(friend.pendding.includes(uid)) {\r\n        return 'displayPic pending'\r\n      } else {\r\n        return 'displayPic'\r\n      }\r\n    } else {\r\n      return 'displayPic'\r\n    }\r\n  }\r\n\r\n  return friends.map((friend, index) => \r\n    <div style={selectedFriend.uid === friend.uid ? {background: '#b1b1b1'} : {}} key={index} className=\"displayName\" onClick = {() => selectFriend(friend)}>\r\n      <div className={addClass(friend, uid)}>\r\n          <img src=\"https://i.pinimg.com/originals/86/63/78/866378ef5afbe8121b2bcd57aa4fb061.jpg\" alt=\"\" />\r\n      </div>\r\n      <div style={{display: 'flex', flex: 1, justifyContent: 'space-between', margin: '0 10px'}}>\r\n          <span style={{fontWeight: 500}}>{friend.firstName + \" \" + friend.lastName}</span>\r\n          <span>{friend.isActive ? 'Active' : 'offline'}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ChatComponent = ({conversation, selectedFriend, user}) => {\r\n  \r\n  const sortCoversation = (data) => {\r\n    data.sort((a, b) => a.createdAt - b.createdAt);\r\n  }\r\n\r\n  sortCoversation(conversation)\r\n  return conversation.map((item, key) => {\r\n    let createdAt = undefined;\r\n    if(item.createdAt != null) {\r\n      let options = { day: 'numeric', month: 'short'};\r\n      createdAt = new Date(item.createdAt).toLocaleString('en', options);\r\n      createdAt += \" \" + new Date(item.createdAt).toLocaleTimeString([], {timeStyle: 'short'});\r\n    }\r\n    return (item.sender === selectedFriend.uid && item.receiver === user.uid) || (item.sender === user.uid && item.receiver === selectedFriend.uid)\r\n    ? <div key={key} style={{ textAlign: item.sender === user.uid ? 'right' : 'left'}}>\r\n            <p className={item.sender === user.uid ? 'messageStyle right-message' : 'messageStyle left-message'} >{item.message}<br/>\r\n              <span className=\"message-time\">{ createdAt? createdAt : '' }</span>\r\n              {item.receiver !== user.uid && <span className=\"message-status\">{item.isSeen ? <i className=\"far fa-eye\"></i> : <i className=\"far fa-eye-slash\"></i>}</span>}\r\n            </p>\r\n      </div>\r\n    : <Fragment key={key}></Fragment>\r\n  })\r\n}\r\n\r\nexport default Chat;\r\n","D:\\Work\\web-chat\\src\\Redux\\User\\UserReducer.js",[],"D:\\Work\\web-chat\\src\\Redux\\Chat\\ChatReducer.js",[],"D:\\Work\\web-chat\\src\\Redux\\User\\ActionType.js",[],"D:\\Work\\web-chat\\src\\config\\firebaseConfig.js",[],"D:\\Work\\web-chat\\src\\Components\\Layout\\Alert.js",[],"D:\\Work\\web-chat\\src\\Redux\\Chat\\ChatActions.js",[],"D:\\Work\\web-chat\\src\\Components\\Header\\Header.js",[],"D:\\Work\\web-chat\\src\\Redux\\Chat\\ActionType.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":30,"column":7,"nodeType":"83","messageId":"84","endLine":30,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":30,"column":21,"nodeType":"87","endLine":32,"endColumn":42},{"ruleId":"85","severity":1,"message":"88","line":37,"column":6,"nodeType":"89","endLine":37,"endColumn":22,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'unsubscribe' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'unsubscribe' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.","ArrayExpression",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [selectedFriend, user.uid]",{"range":"96","text":"97"},[1290,1306],"[selectedFriend, user.uid]"]